// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (base entity with authentication details)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations based on role
  student       Student?
  teacher       Teacher?
  admin         Admin?
  parent        Parent?

  // Common relations
  accounts      Account[]
  sessions      Session[]
  sentMessages     Message[]  @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
  announcements Announcement[]
}

// Role enum for user types
enum Role {
  STUDENT
  TEACHER
  ADMIN
  PARENT
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Student profile model
model Student {
  id                String    @id @default(cuid())
  userId            String    @unique
  studentId         String    @unique
  dateOfBirth       DateTime?
  address           String?
  phoneNumber       String?
  emergencyContact  String?
  academicLevel     String?
  enrollmentDate    DateTime  @default(now())
  status            String    @default("active") // active, inactive, suspended, graduated

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments       Enrollment[]
  attendances       Attendance[]
  grades            Grade[]
  parentStudents    ParentStudent[]
}

// Teacher profile model
model Teacher {
  id                String    @id @default(cuid())
  userId            String    @unique
  teacherId         String    @unique
  qualification     String?
  specialization    String?
  experience        Int?
  dateOfJoining     DateTime  @default(now())
  status            String    @default("active") // active, inactive, terminated

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes           Class[]
  resources         Resource[]
}

// Admin profile model
model Admin {
  id                String    @id @default(cuid())
  userId            String    @unique
  adminId           String    @unique
  department        String?
  accessLevel       String    @default("standard") // standard, elevated, super

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Parent/Guardian profile model
model Parent {
  id                String    @id @default(cuid())
  userId            String    @unique
  parentId          String    @unique
  relationship      String? // father, mother, guardian, etc.
  occupation        String?
  alternatePhone    String?

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentStudents    ParentStudent[]
  payments          Payment[]
}

// Many-to-many relationship between parents and students
model ParentStudent {
  id                String    @id @default(cuid())
  parentId          String
  studentId         String
  relationship      String
  isPrimary         Boolean   @default(false)
  createdAt         DateTime  @default(now())

  // Relations
  parent            Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student           Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId])
}

// Class model
model Class {
  id                String    @id @default(cuid())
  name              String
  subject           String
  description       String?
  startDate         DateTime
  endDate           DateTime?
  schedule          String? // JSON string with schedule details
  capacity          Int
  room              String?
  teacherId         String?
  fee               Float     @default(99.99) // Enrollment fee for the class
  status            String    @default("active") // active, completed, cancelled
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  teacher           Teacher?  @relation(fields: [teacherId], references: [id])
  enrollments       Enrollment[]
  attendances       Attendance[]
  resources         Resource[]
  grades            Grade[]
}

// Enrollment model (student-class relationship)
model Enrollment {
  id                String    @id @default(cuid())
  studentId         String
  classId           String
  enrollmentDate    DateTime  @default(now())
  status            String    @default("enrolled") // enrolled, completed, dropped, pending
  notes             String?
  paymentId         String?   // Reference to payment ID
  paymentStatus     String    @default("pending") // pending, paid, failed, refunded
  paymentDate       DateTime? // When payment was processed

  // Relations
  student           Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class             Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
}

// Attendance model
model Attendance {
  id                String    @id @default(cuid())
  studentId         String
  classId           String
  date              DateTime
  status            String    // present, absent, late, excused
  notes             String?
  recordedBy        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  student           Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class             Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId, date])
}

// Grade/Performance model
model Grade {
  id                String    @id @default(cuid())
  studentId         String
  classId           String
  assessmentName    String
  assessmentType    String    // quiz, test, exam, assignment, project
  score             Float
  maxScore          Float
  weight            Float     @default(1.0)
  feedback          String?
  gradedDate        DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  student           Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class             Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
}

// Payment/Invoice model
model Payment {
  id                String    @id @default(cuid())
  parentId          String
  amount            Float
  currency          String    @default("USD")
  description       String
  invoiceNumber     String    @unique
  dueDate           DateTime
  paymentDate       DateTime?
  status            String    @default("pending") // pending, paid, overdue, cancelled
  paymentMethod     String?
  transactionId     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  parent            Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

// Resource model (teaching materials, assignments)
model Resource {
  id                String    @id @default(cuid())
  title             String
  description       String?
  type              String    // material, assignment, syllabus, etc.
  url               String?
  filePath          String?
  classId           String
  teacherId         String
  isPublished       Boolean   @default(false)
  publishDate       DateTime?
  expiryDate        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  class             Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher           Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

// Communication models
model Message {
  id                String    @id @default(cuid())
  senderId          String
  receiverId        String
  subject           String?
  content           String
  isRead            Boolean   @default(false)
  readAt            DateTime?
  createdAt         DateTime  @default(now())

  // Relations
  sender            User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver          User      @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Announcement {
  id                String    @id @default(cuid())
  title             String
  content           String
  authorId          String
  targetAudience    String    // all, students, teachers, parents, specific-class
  targetClassId     String?
  isPublished       Boolean   @default(false)
  publishDate       DateTime?
  expiryDate        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  author            User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}


