generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String         @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  role             Role           @default(STUDENT)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  admin            Admin?
  announcements    Announcement[]
  activityLogs     ActivityLog[]
  receivedMessages Message[]      @relation("MessageReceiver")
  sentMessages     Message[]      @relation("MessageSender")
  parent           Parent?
  sessions         Session[]
  student          Student?
  teacher          Teacher?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id               String          @id @default(cuid())
  userId           String          @unique
  studentId        String          @unique
  dateOfBirth      DateTime?
  address          String?
  phoneNumber      String?
  emergencyContact String?
  academicLevel    String?
  enrollmentDate   DateTime        @default(now())
  status           String          @default("active")
  attendances      Attendance[]
  enrollments      Enrollment[]
  grades           Grade[]
  parentStudents   ParentStudent[]
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id             String     @id @default(cuid())
  userId         String     @unique
  teacherId      String     @unique
  qualification  String?
  specialization String?
  experience     Int?
  dateOfJoining  DateTime   @default(now())
  status         String     @default("active")
  classes        Class[]
  resources      Resource[]
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id          String  @id @default(cuid())
  userId      String  @unique
  adminId     String  @unique
  department  String?
  accessLevel String  @default("standard")
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Parent {
  id             String          @id @default(cuid())
  userId         String          @unique
  parentId       String          @unique
  relationship   String?
  occupation     String?
  alternatePhone String?
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentStudents ParentStudent[]
  payments       Payment[]
}

model ParentStudent {
  id           String   @id @default(cuid())
  parentId     String
  studentId    String
  relationship String
  isPrimary    Boolean  @default(false)
  createdAt    DateTime @default(now())
  parent       Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId])
}

model Class {
  id          String       @id @default(cuid())
  name        String
  subject     String
  description String?
  startDate   DateTime
  endDate     DateTime?
  schedule    String?
  capacity    Int
  room        String?
  teacherId   String?
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fee         Float        @default(99.99)
  attendances Attendance[]
  assessments Assessment[]
  enrollments Enrollment[]
  grades      Grade[]
  resources   Resource[]
  teacher     Teacher?     @relation(fields: [teacherId], references: [id])
}

model Enrollment {
  id             String    @id @default(cuid())
  studentId      String
  classId        String
  enrollmentDate DateTime  @default(now())
  status         String    @default("enrolled")
  notes          String?
  paymentDate    DateTime?
  paymentId      String?
  paymentStatus  String    @default("pending")
  class          Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  student        Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
}

model Attendance {
  id         String   @id @default(cuid())
  studentId  String
  classId    String
  date       DateTime
  status     String
  notes      String?
  recordedBy String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId, date])
}

model Grade {
  id             String   @id @default(cuid())
  studentId      String
  classId        String
  assessmentName String
  assessmentType String
  score          Float
  maxScore       Float
  weight         Float    @default(1.0)
  feedback       String?
  gradedDate     DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  class          Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student        Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String    @id @default(cuid())
  parentId      String
  amount        Float
  currency      String    @default("USD")
  description   String
  invoiceNumber String    @unique
  dueDate       DateTime
  paymentDate   DateTime?
  status        String    @default("pending")
  paymentMethod String?
  transactionId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  parent        Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String
  url         String?
  filePath    String?
  classId     String
  teacherId   String
  isPublished Boolean   @default(false)
  publishDate DateTime?
  expiryDate  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Message {
  id         String    @id @default(cuid())
  senderId   String
  receiverId String
  subject    String?
  content    String
  isRead     Boolean   @default(false)
  readAt     DateTime?
  createdAt  DateTime  @default(now())
  receiver   User      @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  authorId       String
  targetAudience String
  targetClassId  String?
  isPublished    Boolean   @default(false)
  publishDate    DateTime?
  expiryDate     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  description String
  entityType  String
  entityId    String?
  metadata    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assessment {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        String    @default("ASSIGNMENT")
  maxScore    Float     @default(100)
  weight      Float     @default(1.0)
  dueDate     DateTime
  classId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  PARENT
}
